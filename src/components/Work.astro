---
export interface Props {
  title: string,
  link: string,
  className?: string,
  start: string,
  end?: string,
  techy?: array,
  logo?: string,
  logoWidth?: string,
  logoHeight?: string,
  index: number
}

const { title, className, logo, logoWidth, logoHeight, link, start, end, techy, isActive, index } = Astro.props;

const readableDate = (dateStr: string) => {
  if (dateStr) {
    const options = { year: 'numeric', month: 'long', day: 'numeric' }
    return new Date(dateStr).toLocaleDateString('en', options)
  } else {
    return 'Present'
  }
}

---
<div class={`work ${className ? className: ''} ${index % 2 ? 'odd' : 'even'}`} data-fade-in>
  <!-- <img
    class="cursor-pointer"
    height={logoHeight}
    width={logoWidth}
    data-src={`/icons/${logo}.svg`}
    alt={title}
  /> -->
  <div class="date">
    <time datetime={start}>{ readableDate(start) }</time> -
    <time datetime={end}>{ readableDate(end) }</time>
  </div>
  <div class="desc">
    <h3>
      {link ?
        <a href={link} title={title}>{ title }</a>:
        title
      }
        </h3>
    <slot />
    {techy && <ul class="mt-2">
      <li><strong>Techy words:</strong></li>
      {techy.map((item, id) => <li key={id}>
        { item }
      </li>)}
    </ul>}
  </div>
</div>
<style lang="scss">
img {
  height: 2em;
  width: auto;
}

.work {
  display: grid;
  grid-template-columns: 50px 1fr;
  grid-template-areas: "date desc";
}

.date {
  padding: 5rem 1rem 0 0;
  border-right: 3px solid blue;
  text-align: right;
  position: relative;
  grid-area: date;
  writing-mode: sideways-lr;
  text-orientation: mixed;
}

.desc {
  padding: 1.5rem 0 0 1rem;
  grid-area: desc;
}

.date::after {
  box-shadow: 0 0 0 4px #004ffc;
  right: -7px;
  background: #fff;
  border-radius: 50%;
  height: 11px;
  width: 11px;
  content: "";
  top: calc(1.5rem + 9px);
  position: absolute;
}

@media only screen and (min-width: 750px) {
  .work {
     grid-template-columns: 1fr 1fr; 
  }

  .date {
    padding: 3rem 1rem 0;
    writing-mode: initial;
  }

  .desc {
    padding: 3rem 1rem 0;
    grid-area: desc;
  }

  .date::after {
    top: calc(3rem + 9px);
  }

  .even {
     grid-template-areas: "desc date";
    
    .date {
      border: none;
      text-align: left;

      &::after {
        left: -7px;
      }
    }

    .desc {
      border-right: 3px solid blue;
      text-align: right;
    }
  }
}

.izettle {
  .desc, .date  {
    border-color: #192550;
  }
  
  .date::after {
    box-shadow: 0 0 0 4px #192550;
  }
}

.narrative {
  .desc, .date  {
    border-color: #e26060;
  }

  .date::after {
    box-shadow: 0 0 0 4px #e26060;
  }
}

.noc {
  .desc, .date  {
    border-color: #cee271;
  }

  .date::after {
    box-shadow: 0 0 0 4px #cee271;
  }
}

.m {
  .desc, .date  {
    border-color: #2ba4a6;
  }

  .date::after {
    box-shadow: 0 0 0 4px #2ba4a6;
  }
}

time {
  font-size: 0.8rem;
  line-height: 2rem;
  font-style: italic;
}
img {
  height: 2em;
  width: auto;
}
ul {
  padding: 0;
  font-size: 0.8rem;
}
li {
  display: inline;
}
li::after {
  content: ', ';
}
li:last-child::after {
  content: '';
}
p + p {
  margin-top: 1rem;
}
.hidden {
  display: none;
}
</style>
